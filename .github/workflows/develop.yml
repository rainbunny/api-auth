name: CI-develop

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the develop branch
on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Slack Notification Start
        uses: act10ns/slack@v1
        with:
          status: 'START'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
        if: always()

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Check out credentials
        uses: actions/checkout@v2
        with:
          repository: rainbunny/auth-credentials
          token: ${{ secrets.PAT }}
          path: 'auth-credentials'
          ref: main

      - name: Copy credentials
        run: cp -R ./auth-credentials/environments/* ./environments

      - name: Cache yarn
        uses: actions/cache@v2
        id: yarn-cache-node_modules # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Restore package
        run: yarn

      - name: Update build number
        run: yarn execute update-build ${GITHUB_RUN_NUMBER}

      - name: Validate source code
        run: yarn validate

      - name: Upload test coverage
        run: bash <(curl -s https://codecov.io/bash)

      - name: Change environment
        run: yarn execute change-env dev

      - name: Build
        run: yarn build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to lambda with serverless
        run: |
          mkdir serverless
          cp -r ./package.json ./serverless/package.json
          cp -r ./yarn.lock ./serverless/yarn.lock
          cp -r ./node_modules ./serverless/node_modules
          cp -r ./dist ./serverless/dist
          cp -r ./.env ./serverless/.env
          cp -r ./serverless.dev.yml ./serverless/serverless.yml
          cd serverless
          npx serverless deploy
        env:
          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}

      # - name: Build & push Docker image
      #   run: |
      #     aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin https://${{ secrets.AWS_PUBLIC_ECR }}
      #     yarn build-docker
      #     docker tag rainbunny/auth-api:latest ${{ secrets.AWS_PUBLIC_ECR }}/auth-api:dev
      #     docker push ${{ secrets.AWS_PUBLIC_ECR }}/auth-api:dev

      - name: Slack Notification Finish
        uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
        if: always()
